Count ways to make sum of odd and even indexed elements equal by removing an array element

Problem Description

Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.



Problem Constraints

1 <= n <= 105
-105 <= A[i] <= 105


Input Format

First argument contains an array A of integers of size N


Output Format

Return the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.



Example Input

Input 1:
A=[2, 1, 6, 4]
Input 2:

A=[1, 1, 1]


Example Output

Output 1:
1
Output 2:

3


Example Explanation

Explanation 1:
Removing arr[1] from the array modifies arr[] to { 2, 6, 4 } such that, arr[0] + arr[2] = arr[1]. 
Therefore, the required output is 1. 
Explanation 2:

Removing arr[0] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[1] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[2] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Therefore, the required output is 3

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        odd, even=0,0
        leftodd,lefteven,rightodd,righteven=[0]*len(A), [0]*len(A), [0]*len(A), [0]*len(A)

        for i in range(len(A)):
            leftodd[i] = odd
            lefteven[i] = even
            if i%2!=0:
                odd=odd+A[i]
            else:
                even=even+A[i]
        odd, even=0,0
        for i in range(len(A)-1,-1,-1):
            rightodd[i] = odd
            righteven[i] = even
            if i%2!=0:
                odd=odd+A[i]
            else:
                even=even+A[i]
        ans = 0
        for i in range(len(A)):
            if(leftodd[i] + righteven[i] == lefteven[i] + rightodd[i]):
                ans += 1         
        return ans
